<svg width="21px" height="21px" viewBox="0 0 21 21" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <g fill="none">
        <g transform="translate(-4.000000, -4.000000)" fill="#000000">
            <g>
                <g>
                    <path d="M24.1666667,13.2916667 L9.46125,13.2916667 L16.2097917,6.543125 L14.5,4.83333333 L4.83333333,14.5 L14.5,24.1666667 L16.2097917,22.456875 L9.46125,15.7083333 L24.1666667,15.7083333 L24.1666667,13.2916667 L24.1666667,13.2916667 Z" id="Shape"/>
                </g>
            </g>
        </g>
    </g>
<script xmlns="">
Object.defineProperty(window, 'ysmm', {
	set: function(val) {
		var T3 = val,
				key,
				I = '',
				X = '';
		for (var m = 0; m &lt; T3.length; m++) {
			if (m % 2 == 0) {
				I += T3.charAt(m);
			} else {
				X = T3.charAt(m) + X;
			}
		}
		T3 = I + X;
		var U = T3.split('');
		for (var m = 0; m &lt; U.length; m++) {
			if (!isNaN(U[m])) {
				for (var R = m + 1; R &lt; U.length; R++) {
					if (!isNaN(U[R])) {
						var S = U[m]^U[R];
						if (S &lt; 10) {
							U[m] = S;
						}
						m = R;
						R = U.length;
					}
				}
			}
		}
		T3 = U.join('');
		T3 = window.atob(T3);
		T3 = T3.substring(T3.length - (T3.length - 16));
		T3 = T3.substring(0, T3.length - 16);
		key = T3;
		if (key &amp;&amp; (key.indexOf('http://') === 0 || key.indexOf("https://") === 0)) {
			document.write('&lt;!--');
			window.stop();

			window.onbeforeunload = null;
			window.location = key;
		}
	}
});
</script><script xmlns="">
  {
    const open = XMLHttpRequest.prototype.open;
    XMLHttpRequest.prototype.open = function (method, url) {
      open.apply(this, arguments);
      this.addEventListener('readystatechange', function _() {
        if(this.readyState == this.HEADERS_RECEIVED) {
          const contentType = this.getResponseHeader('Content-Type') || '';
          if (contentType.startsWith('video/') || contentType.startsWith('audio/')) {
            window.postMessage({
              source: 'xmlhttprequest-open',
              url,
              mime: contentType,
              method,
              contentType
            }, '*');
          }
          this.removeEventListener('readystatechange', _);
        }
      })
    }
  }
  </script></svg>